---

- name: Ensure nginx is installed
  apt: name=nginx state=latest

- name: Ensure certbot repository is there
  apt_repository:
    repo: 'ppa:certbot/certbot'

- name: Ensure certbot is installed
  apt: name=python-certbot-nginx state=latest

# Generate certificates if do not exits
- name: Check if we've generated a cert already
  stat:
    path: /etc/letsencrypt/live/www.{{ domain_name }}/fullchain.pem
  register: cert_stats

- name: Ensure /var/www/{{ domain_name }} exists
  file:
    path: /var/www/{{ domain_name }}
    state: directory
    owner: www-data
    group: www-data

- name: Ensure /var/www/letsencrypts/.well-known/acme-challenge exists
  file:
    path: /var/www/letsencrypt/.well-known/acme-challenge
    state: directory
    owner: www-data
    group: www-data

- name: Install letsencrypte acme challenge config
  template:
    src: templates/letsencrypt-acme-challenge.conf
    dest: /etc/nginx/snippets/letsencrypt-acme-challenge.conf

- name: Install default index.html page
  template:
    src: templates/index.html.j2
    dest: /var/www/{{ domain_name }}/index.html

- name: Install initial nginx site for {{ domain_name }}
  template:
    src: templates/nginx-initial.j2
    dest: /etc/nginx/sites-enabled/{{ domain_name }}
  when:
    - cert_stats.stat.exists == false

- name: Restart nginx to activate site {{ domain_name }}
  service: name=nginx state=restarted
  when:
    - cert_stats.stat.exists == false

- name: Ensure certbot generates the Let's encrypt certificates
  command: certbot certonly --webroot --webroot-path /var/www/letsencrypt -d www.{{ domain_name }} -d {{ domain_name }} -d mail.{{ domain_name }} --email {{ letsencrypt_email }} --non-interactive --agree-tos
  when:
    - cert_stats.stat.exists == false

- name: Install nginx site for {{ domain_name }}
  template:
    src: templates/nginx-site.j2
    dest: /etc/nginx/sites-enabled/{{ domain_name }}

- name: Restart nginx to activate site {{ domain_name }}
  service: name=nginx state=restarted
